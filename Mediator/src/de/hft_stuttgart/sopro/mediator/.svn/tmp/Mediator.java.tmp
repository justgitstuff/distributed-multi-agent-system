/*
 * $LastChangedRevision$ $LastChangedBy$ $LastChangedDate:
 * 2009-11-02 22:36:11 +0100 (Mo, 02 Nov 2009) $ $HeadURL:
 * http://sopro.examer.de
 * /svn/branches/Mediator/src/de/hft_stuttgart/sopro/mediator/Mediator.java $
 * $Id$
 */
package de.hft_stuttgart.sopro.mediator;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import de.hft_stuttgart.sopro.common.exceptions.JobInPermutationNotFoundException;
import de.hft_stuttgart.sopro.common.exceptions.ProjectNotFoundException;
import de.hft_stuttgart.sopro.common.exceptions.ResourceNotFoundException;
import de.hft_stuttgart.sopro.common.project.IProject;
import de.hft_stuttgart.sopro.common.project.ProjectComposition;
import de.hft_stuttgart.sopro.common.proposal.IProposal;
import de.hft_stuttgart.sopro.common.proposal.ProposalComposition;
import de.hft_stuttgart.sopro.mediator.data.DataIO;
import de.hft_stuttgart.sopro.mediator.data.generator.ProposalGenerator;
import de.hft_stuttgart.sopro.mediator.exceptions.GenerateProposalException;
import de.hft_stuttgart.sopro.mediator.session.MediationSession;

/**
 * The singleton Mediator. A reference can be received by calling
 * {@link #getInstance()}.
 * 
 * @author Eduard Tudenhoefner - nastra@gmx.net
 */
public class Mediator {

	private List<IProject> availableProjects;

	private ProjectComposition projectComposition;

	/**
	 * The Map containing {@link MediationSession} objects. They key consists of
	 * the IdentityHashcode of {@link IProject} and the string representation of
	 * the project name.
	 * 
	 * @see System#identityHashCode(Object)
	 * @see IProject#getProjectName()
	 */
	private Map<String, MediationSession> mediationSessionMap = new HashMap<String, MediationSession>();

	/**
	 * The Mediator instance.
	 */
	private static Mediator instance = null;

	static {
		instance = new Mediator();
		// instance.init();
	}

	/**
	 * Default constructor which should't be called from outside.
	 */
	private Mediator() {
	}

	/**
	 * The method where the {@link Mediator} instance can be retrieved from.
	 * 
	 * @return A {@link Mediator} instance.
	 */
	public static final Mediator getInstance() {
		if (null == instance) {
			instance = new Mediator();
		}
		return instance;
	}

	public void init() {
		// TODO ET: need to find another way for this
		DataIO dataIO = new DataIO();
		String filepath = "C:\\Dokumente und Einstellungen\\Administrator\\Eigene Dateien\\SoftwareProject\\Problem\\instances\\";
		projectComposition = dataIO.loadAllProblemData(filepath);
		availableProjects = projectComposition.getProjects();
	}

	/**
	 * The method generates as mutch proposals as you want and store them in the
	 * ProposalComposition
	 * 
	 * @param projectId
	 *            The id of the project to generate the Proposals.
	 * @return the container which contains the numberOfProposals Proposals
	 * @throws ResourceNotFoundException
	 * @throws GenerateProposalException
	 */
	private ProposalComposition createProposals(int projectId) throws GenerateProposalException, ResourceNotFoundException{
		MediationSession session = null;
		try {
			session = this.getSessionOfProject(projectId);
		} catch (ProjectNotFoundException e) {
			e.printStackTrace();
		}

		// create the Proposals for that session
		return session.createProposals();
	}

	private void aggregateVoting() {

	}

	/**
	 * The method takes the solution of the voting aggregation and updates the
	 * pheromone matrix with this solution (proposal)
	 * 
	 * @param projectId
	 *            The id of the project for the update of the pheromone matrix.
	 * @param bestProposal
	 *            the winner of the voting aggregation
	 * @throws JobInPermutationNotFoundException
	 */
	private void updatePheromoneMatrix(int projectId, IProposal bestProposal) throws JobInPermutationNotFoundException{
		MediationSession session = null;
		try {
			session = this.getSessionOfProject(projectId);
		} catch (ProjectNotFoundException e) {
			e.printStackTrace();
		}

		// update the pheromone Matrix of that session
		session.updatePheromoneMatrix(bestProposal);
	}

	/**
	 * The method takes the evaluated ProposalComposition of the agent and set
	 * it in the session
	 * 
	 * @param projectId
	 *            The id of the project for the update of the pheromone matrix.
	 * @param evaluatedProposals
	 *            the proposal container which contains now a score for each proposal
	 */
	public void setProposalsWithScore(int projectId, int agentId, ProposalComposition evaluatedProposals){
		MediationSession session = null;
		try {
			session = this.getSessionOfProject(projectId);
		} catch (ProjectNotFoundException e) {
			e.printStackTrace();
		}
		
		//Set the ecaluated Proposal of one agent to the session
		session.setProposalsWithScore( evaluatedProposals, agentId );
	}

	public List<IProject> getAvailableProjects() {
		return availableProjects;
	}

	/**
	 * An Agent can join a project by specifying the projectId to join and its
	 * agentId.
	 * 
	 * @param projectId
	 *            The id of the project to join.
	 * @param agentId
	 *            The id of the agent.
	 * @return true when it was possible to join the project, otherwise false.
	 */
	public boolean joinProject(int projectId, int agentId) {
		if (null != projectComposition) {
			try {
				IProject project = projectComposition.getProjectById(projectId);
				String hashMapKey = System.identityHashCode(project) + project.getProjectName();

				if (project.getCurrentAgentsOnProject().isEmpty()) {
					// first arriving agent is the creator of the session
					MediationSession session = new MediationSession(project, agentId);
					mediationSessionMap.put(hashMapKey, session);
				} else {
					// second arriving agent just joins a previous created
					// session
					MediationSession session = mediationSessionMap.get(hashMapKey);
					session.addAgentToSession(agentId);
				}

				project.joinProject(agentId);
				return true;
			} catch (ProjectNotFoundException e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	/**
	 * Returns a list of payment data for a project specified by the projectId
	 * and the agentId.
	 * 
	 * @param projectId
	 *            The id of the project where the payment data should be
	 *            retrieved from.
	 * @param agentId
	 *            The id of the agent.
	 * @return A list of payment data for a project specified by the projectId
	 *         and the agentId.
	 */
	@SuppressWarnings("unchecked")
	public List<Double> retrievePaymentDataForProject(int projectId, int agentId) {
		if (null != projectComposition) {
			try {
				IProject project = projectComposition.getProjectById(projectId);
				return project.getPayments();
			} catch (ProjectNotFoundException e) {
				e.printStackTrace();
			}

		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * The method generates the the proposal for one project and return them
	 * 
	 * @param projectId
	 *            The id of the project for which the proposals are generated
	 * @return the proposals of one iteration           
	 */
	public ProposalComposition sendProposals(int projectId) {
		return null;
	}
	
	/**
	 * The method reads the sends the paymentdata to the agents
	 * 
	 * @param projectId
	 *            The id of the project for which the payment data should be sent
	 * @param agentId
	 *            The id of the agent.           
	 * @return a list which contains for each job of the project one payment value           
	 */
	public List<Double> sendPaymentdata(int projectId, int agentId) {
		return Collections.EMPTY_LIST;
	}
	
	/**
	 * The method sends the interest rate of a session to the agents
	 * 
	 * @param projectId
	 *            The id of the project for which the interest rate should be sent       
	 * @return the interest rate which is used for the session           
	 */
	public double sendInterestRate( int projectId ) {
		MediationSession session = null;
		try {
			session = this.getSessionOfProject(projectId);
		} catch (ProjectNotFoundException e) {
			e.printStackTrace();
		}
		
		return session.getInterestRate();
	}

	/**
	 * The method finds the session which handles the project with the given id
	 * @param projectId
	 * 			the id of the project for the session
	 * @return the session which handles the project with the given id
	 * @throws ProjectNotFoundException 
	 */
	private MediationSession getSessionOfProject(int projectId) throws ProjectNotFoundException{
		if (projectComposition == null) {
			throw new ProjectNotFoundException();
		}

		IProject project = projectComposition.getProjectById(projectId);
		String hashMapKey = System.identityHashCode(project) + project.getProjectName();

		// Get the session of the project
		return mediationSessionMap.get(hashMapKey);
	}
}
