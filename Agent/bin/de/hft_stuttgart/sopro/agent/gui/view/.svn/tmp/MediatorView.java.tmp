package de.hft_stuttgart.sopro.agent.gui.view;

import java.rmi.RemoteException;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Shell;

import de.hft_stuttgart.sopro.agent.IAgent;
import de.hft_stuttgart.sopro.agent.gui.AmpManager;
import de.hft_stuttgart.sopro.agent.gui.ViewsEnum;
import de.hft_stuttgart.sopro.agent.remote.MediatorAgentServiceStub;
import de.hft_stuttgart.sopro.agent.remote.MediatorAgentServiceStub.UnregisterAgent;

/**
 * This view provides the user the choice to which mediator the agent will be
 * connecting to.
 * 
 * @author Matthias Huber - MatthewHuber@web.de
 */
public class MediatorView {

	/**
	 * The shell of the user interface.
	 */
	private Shell shell;

	/**
<<<<<<< .mine
	 * This list contains all available projects depending on the filter
	 * (all/none/one).
=======
	 * This list contains the mediators.
>>>>>>> .r375
	 */
	private List mediators;

	/**
	 * The composite which holds all widgets of the view.
	 */
	private Composite composite;
<<<<<<< .mine

=======

	/**
	 * The number of columns of the used {@link GridLayout}.
	 */
	private static final int numberOfColumns = 5;

>>>>>>> .r375
	private Button removeMediator;
	private Button connect;

	private Label statusLine;

	private boolean isConnected = false;

	private MediatorAgentServiceStub stub;

	private Button cancel;

	public MediatorView(Shell shell) {
		this.shell = shell;
	}

	public void show() {

		composite = new Composite(shell, SWT.BORDER);
		composite.setSize(shell.getSize().x, shell.getSize().y);
		GridLayout gridLayout = new GridLayout();
		composite.setLayout(gridLayout);

		// top area
		createTopArea();

		// bottom area
		createBottomArea();

		// check button states
		updateButtons();
	}

	/**
	 * This method creates the top part of the view. Included widgets are the
	 * label, the list box containing the mediators and the two buttons for
	 * adding and removing of mediators.
	 */
	private void createTopArea() {

		Composite topArea = new Composite(composite, SWT.BORDER);
		GridData gridData = new GridData(GridData.FILL_HORIZONTAL);
		GridLayout glTopArea = new GridLayout(numberOfColumns, true);
		glTopArea.verticalSpacing = numberOfColumns;
		gridData.heightHint = (int) (composite.getClientArea().height * 0.78);
		topArea.setLayout(glTopArea);
		topArea.setLayoutData(gridData);

		// label
		Label label = new Label(topArea, SWT.NONE);
		label.setText("Choose a mediator:");
		gridData = new GridData(GridData.FILL_HORIZONTAL);
		gridData.horizontalSpan = numberOfColumns;
		label.setLayoutData(gridData);

		// one empty row
		Label emptyRow = new Label(topArea, SWT.NONE);
		emptyRow.setVisible(false);
<<<<<<< .mine
		gd = new GridData(GridData.FILL_HORIZONTAL);
		gd.horizontalSpan = nCol;
		emptyRow.setLayoutData(gd);

=======
		gridData = new GridData(GridData.FILL_HORIZONTAL);
		gridData.horizontalSpan = numberOfColumns;
		emptyRow.setLayoutData(gridData);

>>>>>>> .r375
		// List
		mediators = new List(topArea, SWT.BORDER | SWT.V_SCROLL);
		mediators.add("http://tomcat.examer.de/axis2/services/MediatorAgentService");
		gridData = new GridData(GridData.FILL_HORIZONTAL);
		gridData.horizontalSpan = numberOfColumns - 1;
		gridData.verticalSpan = 5;
		// TODO: change to relative height (matthias)
<<<<<<< .mine
		gd.heightHint = 200;
		mediators.setLayoutData(gd);

=======
		gridData.heightHint = 200;
		mediators.setLayoutData(gridData);

>>>>>>> .r375
		mediators.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				updateButtons();
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});

		// Add Button
		Button addMediator = new Button(topArea, SWT.PUSH);
		addMediator.setText("Add");
		gridData = new GridData(GridData.FILL_HORIZONTAL);
		addMediator.setLayoutData(gridData);

		addMediator.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				Button widget = (Button) e.widget;
				AddMediatorView view = new AddMediatorView(widget.getShell(), mediators);
				view.open();
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});

		// Remove Button
		removeMediator = new Button(topArea, SWT.PUSH);
		removeMediator.setText("Remove");
		gridData = new GridData(GridData.FILL_HORIZONTAL);
		removeMediator.setLayoutData(gridData);

		removeMediator.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				if (mediators.getSelectionIndex() != -1) {
					mediators.remove(mediators.getSelectionIndex());
					updateButtons();
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});
	}

	/**
	 * This method creates the bottom part of the view. Included widgets are the
	 * label which acts like a status line and the two Buttons.
	 */
	private void createBottomArea() {
		Composite bottomArea = new Composite(composite, SWT.BORDER);
		GridData gd = new GridData(GridData.FILL_HORIZONTAL);
		gd.heightHint = (int) (composite.getClientArea().height * 0.1);
		bottomArea.setLayout(new GridLayout(5, true));
		bottomArea.setLayoutData(gd);

		// Status line
		statusLine = new Label(bottomArea, SWT.NONE);
		gd = new GridData(GridData.FILL_HORIZONTAL);
		gd.horizontalSpan = numberOfColumns - 2;
		statusLine.setLayoutData(gd);

		// Cancel Button
		cancel = new Button(bottomArea, SWT.PUSH);
		cancel.setText("Cancel");
		gd = new GridData(GridData.FILL_HORIZONTAL);
		cancel.setLayoutData(gd);

		cancel.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				if (isConnected) {
					if (disconnectFromServer()) {
						isConnected = false;
						changeWidgetTexts();
						System.out.println("Unregistering of Agent was: true");
					} else {
						// TODO: handle this
					}
				} else {
					e.display.getActiveShell().dispose();
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});

		// Connect Button
		connect = new Button(bottomArea, SWT.PUSH);
		connect.setText("Connect");
		gd = new GridData(GridData.FILL_HORIZONTAL);
		connect.setLayoutData(gd);

		connect.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				if (!isConnected) {
					statusLine.setText("Connecting. Please Wait!");
					int id = connectToServer();
					if (id != -1) {
						System.out.println("registered with id: " + id);
						isConnected = true;
						changeWidgetTexts();
					}
				} else {
					AmpManager.getAmp().switchToView(ViewsEnum.PROJECTVIEW);
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});
<<<<<<< .mine

		// check button states
		updateButtons();
=======
>>>>>>> .r375
	}
<<<<<<< .mine

=======

	/**
	 * Checks if a mediator is selected
	 * 
	 * @return true if a mediator is selected
	 */
>>>>>>> .r375
	private boolean isMediatorSelected() {
		return mediators.getSelectionIndex() != -1;
	}
<<<<<<< .mine

=======

	/**
	 * This method updates the state (enabled/disabled) of the buttons.
	 */
>>>>>>> .r375
	private void updateButtons() {
		removeMediator.setEnabled(isMediatorSelected());
		connect.setEnabled(isMediatorSelected());
	}

	/**
	 * This method opens a connection to mediator and register the agent.
	 * 
	 * @return Returns the id (a positive integer value) if the connection to
	 *         the server was successful, otherwise -1 is returned.
	 */
	private int connectToServer() {
		int i = -1;
		try {
			stub = new MediatorAgentServiceStub(mediators.getItem(mediators.getSelectionIndex()));
			IAgent agent = AmpManager.getAgent();
			agent.setAgentId(stub.registerAgent().get_return());
			i = agent.getAgentId();
		} catch (Exception ex) {
			statusLine.setText("Connecting to server failed.");
			ex.printStackTrace();
		}
		return i;

	}

	/**
	 * This method tries to disconnect from the mediator.
	 * 
	 * @return Returns true if disconnecting was successful, otherwise false.
	 */
	private boolean disconnectFromServer() {
		UnregisterAgent unregisterAgent = new UnregisterAgent();
		unregisterAgent.setAgentId(AmpManager.getAgent().getAgentId());
		try {
			return stub.unregisterAgent(unregisterAgent).get_return();
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * Changes the text of the label (status line) and the two buttons (cancel / connect).
	 */
	private void changeWidgetTexts() {
		if (isConnected) {
			connect.setText("Next");
			cancel.setText("Disconnect");
			statusLine.setText("Connection established.");
		} else {
			cancel.setText("Cancel");
			connect.setText("Connect");
			statusLine.setText("You are now disconnected from server.");
		}
	}
}
